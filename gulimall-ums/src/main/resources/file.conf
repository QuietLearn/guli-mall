#客户端配置
#该微服务rm客户端和seata建立连接使用的通信规则
transport {
  # tcp udt unix-domain-socket
  type = "TCP"
  #NIO NATIVE
  server = "NIO"
  #enable heartbeat
  heartbeat = true
  #thread factory for netty
  thread-factory {
    boss-thread-prefix = "NettyBoss"
    worker-thread-prefix = "NettyServerNIOWorker"
    server-executor-thread-prefix = "NettyServerBizHandler"
    share-boss-worker = false
    client-selector-thread-prefix = "NettyClientSelector"
    client-selector-thread-size = 1
    client-worker-thread-prefix = "NettyClientWorkerThread"
    # netty boss thread size,will not be used for UDT
    boss-thread-size = 1
    #auto default pin or 8
    worker-thread-size = 8
  }
}
#事务日志存储
## transaction log store
store {
# 分支事务存储在哪个数据库里，不是undo-log，只是用作事务记录日志
  ## store mode: file、db
  mode = "db"

  ## file store
  file {
    dir = "sessionStore"

    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions
    max-branch-session-size = 16384
    # globe session size , if exceeded throws exceptions
    max-global-session-size = 512
    # file buffer size , if exceeded allocate new buffer
    file-write-buffer-cache-size = 16384
    # when recover batch read size
    session.reload.read_size = 100
    # async, sync
    flush-disk-mode = async
  }

   # 分支事务存储在哪个数据库里，不是undo-log，只是用作事务记录日志
  ## database store
  db {
    driver_class = "com.mysql.jdbc.Driver"
    url = "jdbc:mysql://192.168.101.128:3306/guli_ums"
    user = "root"
    password = "123456"
  }

}

## 不同的分布式事务隔离开来，应该是每次分支事务请求都会携带XID，某支分支事务失败了，TC知道XID下所有的分支事务，
## 通过代理数据源让所有代理数据源用conn执行撤销操作【通过undo-log记录的XID，？？知道XID不就行了，TC根据记录操作数据记录的ID干嘛？哦，找到对应undo-log表的记录还需要知道对哪条记录进行回滚撤销操作】
#连向seata服务器，当前服务的名字是gulimall-ums  (gulimall-ums-fescar-service-group )
service {
  #vgroup->rgroup
  #默认名称空间，名称空间用于分布式事务之间的隔离
  vgroup_mapping.gulimall-ums-fescar-service-group = "default"
  #only support single node
  #seata服务器的地址端口
  default.grouplist = "127.0.0.1:8091"
  #degrade current not support
  enableDegrade = false
  #disable
  disable = false
}
client {
#限制RM提交和seata顶多建立10000连接缓冲  提交缓冲池的容量大小最大10000，缓冲越大同时并发 保持的分支事务数越多
  async.commit.buffer.limit = 10000
  lock {
  #客户端相关工作机制
  #seata内部怎么一起提交一起回滚，通过锁机制
  #最多重置这么多次，如果还是失败了，那么则回滚
  #内部重置的超时时间
    retry.internal = 10
    #重置次数
    retry.times = 30
  }
}